name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, loadTesting ]
  pull_request:
    branches: [ main, develop, loadTesting ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: abdelrahmanelsayed/online-bookstore

jobs:
  # Frontend Build and Test
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || echo "Linting step skipped - add lint script to package.json"
    
    - name: Build frontend
      run: npm run build
    
    - name: Run tests
      run: npm test || echo "Tests skipped - add test script to package.json"

  # Backend Services Build and Test
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [catalog-service, order-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./services/${{ matrix.service }}/${{ matrix.service == 'catalog-service' && 'CatalogService' || 'OrderService' }}
    
    - name: Build solution
      run: dotnet build --no-restore
      working-directory: ./services/${{ matrix.service }}/${{ matrix.service == 'catalog-service' && 'CatalogService' || 'OrderService' }}
    
    - name: Run tests
      run: dotnet test --no-build --verbosity normal
      working-directory: ./services/${{ matrix.service }}/${{ matrix.service == 'catalog-service' && 'CatalogService' || 'OrderService' }}

  # Docker Build and Push
  docker-build:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [catalog-service, order-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        file: ./services/${{ matrix.service }}/${{ matrix.service == 'catalog-service' && 'CatalogService/Dockerfile' || 'OrderService/Dockerfile' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Load Testing (only on main branch)
  load-testing:
    needs: [docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Start services for testing
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to be ready
    
    - name: Run load tests
      run: |
        k6 run services/catalog-service/CatalogService/Tests/k6/10VUs-30secs.js
        k6 run services/catalog-service/CatalogService/Tests/k6/100VUs-30secs.js
    
    - name: Stop services
      run: docker-compose down

  # Deployment (only on main branch)
  deploy:
    needs: [docker-build, load-testing]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment step - customize based on your infrastructure"
        echo "Examples:"
        echo "- Deploy to Kubernetes: kubectl apply -f k8s/"
        echo "- Deploy to Docker Swarm: docker stack deploy -c docker-compose.prod.yml"
        echo "- Deploy to cloud provider (AWS/GCP/Azure)"
        echo "Current services to deploy:"
        echo "- catalog-service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/catalog-service:latest"
        echo "- order-service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/order-service:latest"
    
    - name: Health check
      run: |
        echo "Health check step - verify services are running correctly"
        # Add your health check commands here
        # Example: curl -f http://your-domain/api/health || exit 1

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
